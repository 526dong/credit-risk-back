<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="
    	http://www.springframework.org/schema/mvc 
    	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd 
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
       ">
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">    
	        <property name="globalSessionTimeout" value="1800000"/>    
	        <property name="deleteInvalidSessions" value="true"/>    
	        <property name="sessionDAO" ref="sessionDAO"/>    
	        <property name="sessionIdCookieEnabled" value="true"/>    
	        <property name="sessionIdCookie" ref="sessionIdCookie"/>    
	        <property name="sessionValidationSchedulerEnabled" value="true"/>  
	        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>  
	        <property name="cacheManager" ref="cacheManager"/>  
	</bean>   
 <!-- 会话DAO，sessionManager里面的session需要保存在会话Dao里，没有会话Dao，session是瞬时的，没法从  
     sessionManager里面拿到session -->    
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">    
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>    
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>  
    </bean>  
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">    
        <constructor-arg name="name" value="wxn.session.id"/>  
        <property name="httpOnly" value="true"/>  
        <property name="maxAge" value="-1"/>   
	</bean> 
	<!-- 会话ID生成器 -->  
 	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"></bean>  
 	<bean id="kickoutSessionControlFilter"  class="com.ccx.shiro.KickoutSessionControlFilter">    
	    <property name="sessionManager" ref="sessionManager"/>    
	    <property name="cacheManager" ref="cacheManager"/>  
	    <property name="kickoutAfter" value="false"/>    
	    <property name="maxSession" value="1"/>    
	    <property name="kickoutUrl" value="/login?kickout=1"/>    
	</bean> 
 	   <!-- 会话验证调度器 -->  
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler ">  
        <property name="interval" value="1800000"/>  
        <property name="sessionManager" ref="sessionManager"/>  
    </bean> 
    <bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">  
     	<property name="redirectUrl" value="/login" />  
    </bean> 
       
       
 	

	<!--管理-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- ref对应我们写的realm MyShiro -->
		<property name="realm" ref="dbRealm" />
		<!-- 缓存 -->
		<property name="sessionManager" ref="sessionManager"/> 
		<property name="cacheManager" ref="cacheManager" />
	</bean>

	<!-- 缓存管理器 使用Ehcache实现 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>
	<!-- 配置权限管理器 -->
	<bean id="dbRealm" class="com.ccx.shiro.DbRealm">
<!-- 		<property name="CredentialsMatcher" ref="credentialsMatcher" /> -->
	</bean>

	<!-- 凭证匹配器 -->
	<!-- <bean id="credentialsMatcher" class="com.ccx.shiro.RetryLimitCredentialsMatcher">
		<constructor-arg ref="cacheManager" />
		密码加密 1次md5,增强密码可修改此处
		<property name="hashAlgorithmName" value="md5"/>
		<property name="hashIterations" value="1"/>
	</bean> -->

	<!-- 配置shiro的过滤器工厂类，id- shiroFilter要和我们在web.xml中配置的过滤器一致 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 调用我们配置的权限管理器 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 配置我们的登录请求地址 -->
		<property name="loginUrl" value="/login" />
		<!-- 配置我们在登录页登录成功后的跳转地址，如果你访问的是非/login地址，则跳到您访问的地址 -->
		<property name="successUrl" value="/index" />
		<!-- 如果您请求的资源不再您的权限范围，则跳转到/403请求地址 -->
		<property name="unauthorizedUrl" value="/unauth" />
		 <property name="filters">
			<map>
				<entry key="anyRoles" value-ref="anyRoles"/> 
				<entry key="ajaxSessionFilter" value-ref="ajaxSessionFilter"/> 
				<entry key="kickout" value-ref="kickoutSessionControlFilter"/>  
			</map>
		</property>
		<!-- 权限配置 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- anon表示此地址不需要任何权限即可访问 -->
				<!-- /** = anon -->
				/login=anon
				/checkLogin=anon
				/resources/**=anon
				/unauth = anon
				/favicon.ico = anon
				/authImage = anon
				/logout = anon
				/getVerifyCode = anon
				/index =kickout, authc
				/checkLoginName = anon
				/getWarnMsg = anon
				<!--开发时放开
				/**=authc
				 -->
				/** = kickout, authc,anyRoles
				/** = kickout,authc  
			</value>
		</property>
	</bean>
<!-- 自定义角色权限控制 -->
    <bean id="anyRoles" class="com.ccx.shiro.RolesOrAuthorizationFilter" />  
	<!-- ajax session超时时处理 -->
	<bean id="ajaxSessionFilter" class="com.ccx.shiro.ShiroAjaxSessionFilter"/>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
   		 <property name="maxUploadSize" value="10485760" />  
	</bean>
</beans>  